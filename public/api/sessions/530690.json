{
  "id": "530690",
  "title": "Imposters! faking endpoints over-the-wire",
  "speakers": [
    {
      "id": "cb70d1bd-13ab-4a16-abfd-cf48b37ec30d",
      "name": "Bob Crowley",
      "photo": "https://sessionize.com/image/0f1c-400o400o1-bd-13ab-4a16-abfd-cf48b37ec30d.24b187ae-c9c9-4580-ad0e-ca856b8912ee.png",
      "bio": "Bob Crowley is a Software Engineer near Portland Maine where he builds solutions in the .NET ecosystem. He has been writing bugs for over $\"{DateTime.Now.Year - 2004} years\". He is on the organization committee for New Hampshire's Granite State Code Camp where he builds and operates a Capture the Flag competition for attendees. \n \n In his free time he likes to make the most of both weeks of Maine's summer either fishing out on the ocean or throwing discs at trees.\n \n Find Bob on LinkedIn as contrivedexample",
      "links": [
        {
          "title": "Twitter",
          "url": "https://twitter.com/contrivedexmple"
        },
        {
          "title": "LinkedIn",
          "url": "https://www.linkedin.com/in/contrivedexample"
        },
        {
          "title": "Blog",
          "url": "https://contrivedexample.com"
        },
        {
          "title": "Company Website",
          "url": "https://crowley.software"
        }
      ]
    }
  ],
  "room": "Nile",
  "track": "Software Quality",
  "tags": [
    "Backend",
    "Code Quality",
    "QA Testing"
  ],
  "format": "General Session",
  "level": "Intermediate",
  "day": "Friday",
  "startTime": "9:45",
  "endTime": "10:45",
  "excerpt": "Faking remote services can be very useful. Maybe you need to build against a service that isn't created yet, mock micro service dependencies, test against an API that only has a production instance or validate a large number of data scenarios that would be difficult to achieve with a \"real\"...",
  "description": "Faking remote services can be very useful. Maybe you need to build against a service that isn't created yet, mock micro service dependencies, test against an API that only has a production instance or validate a large number of data scenarios that would be difficult to achieve with a \"real\" instance.\n\nFor these reasons and more, Mountebank is the best free, cross platform tool for the job. With it, you can spin up your imposter services and have them respond over-the-wire, just like the real thing.\nThese imposter endpoints can be instantiated from a configuration file, on the fly based on business logic of an executing test, from any tool that can make a POST or any combination of them.\n\nIt works by exposing stubs filtered by predicates that dynamically match a request with a response based on properties you define in the URL, headers, body content, etc. It can even be configured to respond in multiple ways per predicate in a round-robin fashion.\n\nAnd its not just for HTTP. Mountebank supports TCP, SMTP and other community contributed protocols.\n\nThis session shows you how easy it is to harness the power of Mountebank to create and use imposters. We demonstrate starting the tool, spinning up imposters via code or http tool (like postman), employing security, viewing the logs, capturing and validating responses and tearing down when done.\n\nBy the end of this session you will have the knowledge to begin leveraging imposters in your testing workflow to gain more confidence in your software."
}