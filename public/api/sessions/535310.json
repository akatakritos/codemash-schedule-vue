{
  "id": "535310",
  "title": "Java Anti-Patterns",
  "speakers": [
    {
      "id": "11fbf1c5-b0fc-42eb-a027-4fea2e54bb12",
      "name": "Vitaliy Matiyash",
      "photo": "https://sessionize.com/image/a45d-400o400o1-UQKYbsP5udCreAyU5df2CV.jpg",
      "bio": "Vitaliy Matiyash is Software Engineer from Columbus, Ohio, working on both front end and back end technologies with focus on web accessibility. In his spare time he enjoys working on various DIY projects, biking, hiking Central Ohio trails and cooking from scratch.",
      "links": [
        {
          "title": "Twitter",
          "url": "https://twitter.com/vitaliymatiyash"
        },
        {
          "title": "LinkedIn",
          "url": "https://www.linkedin.com/in/VitaliyMatiyash/"
        },
        {
          "title": "Blog",
          "url": "http://vitaliymatiyash.com/"
        }
      ]
    }
  ],
  "room": "Salon G",
  "track": "Programming Principles",
  "tags": [
    "Java",
    "Backend",
    "Programming Principles"
  ],
  "format": "General Session",
  "level": "Introductory and overview",
  "day": "Thursday",
  "startTime": "8:00",
  "endTime": "9:00",
  "excerpt": "God object, spaghetti code, magic numbers? Anti-patterns are traps that developers encounter frequently due to lack of time, carelessness, inexperience, or pressure from project managers. Rushing can lead to big problems for applications in future, so you need to know how to avoid potential...",
  "description": "God object, spaghetti code, magic numbers? Anti-patterns are traps that developers encounter frequently due to lack of time, carelessness, inexperience, or pressure from project managers. Rushing can lead to big problems for applications in future, so you need to know how to avoid potential errors.\n\nCome learn about Java Anti-Patterns. In this session beginner Java developers can learn to identify common rookie developer mistakes. Experienced developers can cry or laugh together as we look at real-life examples of Java code. You will leave this session knowing how to avoid these anti-patterns and write elegant, maintainable, and (dare we say it?) fun to work with code. Finally, you will find better ways to implement solutions using Java."
}