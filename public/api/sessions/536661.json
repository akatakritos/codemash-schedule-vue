{
  "id": "536661",
  "title": "Services Reloaded: Increased Throughput with Project Loom Virtual Threads",
  "speakers": [
    {
      "id": "ff0a1dd3-c9f2-48e2-88a8-9c0e429251be",
      "name": "Kito Mann",
      "photo": "https://sessionize.com/image/4dd4-400o400o1-KVpK6xjCnRxMPxCfVjDNf2.jpg",
      "bio": "Kito D. Mann is the Principal Consultant at Virtua, Inc., specializing in enterprise application architecture, training, development, and mentoring with microservices, cloud, Web Components, Angular, and Jakarta/Java EE technologies. He is also the co-host of The Stackd Podcast and the author of JavaServer Faces in Action. Mann has participated in several Java Community Process expert groups (including CDI, JSF, and Portlets) and is an internationally recognized speaker. He is also a Java Champion and Google Developer Expert in Web Technologies. He holds a BA in Computer Science from Johns Hopkins University.",
      "links": [
        {
          "title": "Twitter",
          "url": "https://twitter.com/kito99"
        },
        {
          "title": "LinkedIn",
          "url": "https://www.linkedin.com/in/kitomann/"
        },
        {
          "title": "Blog",
          "url": "https://kitomann.com"
        },
        {
          "title": "Company Website",
          "url": "https://virtua.tech/"
        }
      ]
    }
  ],
  "room": "Salon G",
  "track": "Architecture",
  "tags": [
    "Java",
    "Backend"
  ],
  "format": "General Session",
  "level": "Intermediate",
  "day": "Thursday",
  "startTime": "13:00",
  "endTime": "14:00",
  "excerpt": "The promise of Reactive programming models is that you can free yourself from the constraints of handling one request for each thread and realize increased throughput as a result. The only problem is that it requires a completely different set of APIs that many developers find counter-intuitive....",
  "description": "The promise of Reactive programming models is that you can free yourself from the constraints of handling one request for each thread and realize increased throughput as a result. The only problem is that it requires a completely different set of APIs that many developers find counter-intuitive. What if you can achieve the same performance using thread-per-request APIs, and let the Java virtual machine handle the hard work of blocking when appropriate, and executing platform threads when the time is right? Enter virtual threads, a key feature of Project Loom, currently available in JDK 19. In this session, we'll look at how different frameworks, such as Helidon and Quarkus, are using this powerful new feature to increase throughput without requiring reactive programming models."
}