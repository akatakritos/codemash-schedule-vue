{
  "id": "537287",
  "title": "git gone wild: how to recover from common git mistakes.",
  "speakers": [
    {
      "id": "09e04998-f839-4e00-962b-8f4088677cbd",
      "name": "Magnus Stahre",
      "photo": "https://sessionize.com/image/f63e-400o400o1-98-f839-4e00-962b-8f4088677cbd.db531401-7acf-44e9-ba2b-af71a754b5bb.jpg",
      "bio": "Magnus Stahre is a software craftsman doing application development for over two decades.\n \n He is currently a Site Reliability Engineer at Ford Motor Company where he keeps infrastructure and applications up and running under heavy load.",
      "links": [
        {
          "title": "Twitter",
          "url": "https://twitter.com/magnusstahre"
        },
        {
          "title": "LinkedIn",
          "url": "https://www.linkedin.com/in/magnusstahre/"
        },
        {
          "title": "Blog",
          "url": "http://ms.xy.org/"
        }
      ]
    }
  ],
  "room": "Orange",
  "track": "Programming Principles",
  "tags": [
    "Programming Principles"
  ],
  "format": "General Session",
  "level": "Intermediate",
  "day": "Thursday",
  "startTime": "16:45",
  "endTime": "17:45",
  "excerpt": "\"Oh no! I just typed something into git and now my work is gone! Ahh!\"\n\nDon't panic. Contrary to popular belief, git is one of the most non-destructive version control systems available. When used right, git\nnever loses any data, and even when misused, chances are very high you can still...",
  "description": "\"Oh no! I just typed something into git and now my work is gone! Ahh!\"\n\nDon't panic. Contrary to popular belief, git is one of the most non-destructive version control systems available. When used right, git\nnever loses any data, and even when misused, chances are very high you can still recover.\n\nThis talk will present turn-by-turn directions on how to recover from a wide array of common git mistakes, and also provide some workflows\nto minimize them.\n\nExamples include, but are not limited to:\n* Changing spelling errors in commit messages.\n* Split commits into multiple commits with logical separation.\n* Combining multiple commits into one.\n* Resetting the base commit when you accidentally branch off of the wrong branch.\n* Recovering from merge conflicts.\n\nAs well as more advanced topics, such as:\n* Extracting parts (e.g. sub-directory) of a repository as a new repository.\n* Merging multiple repositories into one while retaining version history.\n* Removing confidential data accidentally committed."
}